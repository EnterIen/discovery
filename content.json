{"pages":[],"posts":[{"title":"客服系统 2.0","text":"前言 此文借以北京住范儿客服系统为原型撰写 强烈建议入门选手先看看这一篇写给产品经理的《零基础IM开发入门》 客服系统 2.0 是什么？支持小程序网页、Web 网页实时通信的管理系统，部分效果如下(插图)： ​ 技术堆栈 PHP Laravel Workerman(GatewayWorker) Redis Mysql ​ 流程图 功能组成与实践 上面简单描述了一下客服系统交互流程，下面就展开讲讲要实现的细节。 联系人列表 这里的联系人列表是指某一时间段下客服接待的用户列表，实质上就是绑定客服这个 Socket Client 的所有用户 Client。需要注意的是这个列表不会分页，因为方便搜索定位。 聊天界面 这里主要就是发消息(Message)，包含文本、图片、商品、订单，需要划分类型，所以我们需要定义一个消息结构体。 未读消息 联系人列表上需要统计未读消息数 离线消息 当用户给客服发消息时，如果 Socket 连接可用，需要判断这个连接是否在线，如果不在线，先把消息发到离线数据库里，等对应的客服上线之后，主动向服务器拉取离线消息 如何保证客服系统的实时性、可靠性、一致性、安全性​ | 特征 | 前后端 | | —: | —: | —: | | 实时性 | 多进程消费 | | | 可靠性 | 重传-确认机制 | | | 安全性 | HTTPS+TOKEN | | | 一致性 | 消息去重、服务器时间同步、哈希进程 | | 心跳保活 正常的情况客户端断开连接会向服务端发送一个fin包，服务端收到fin包后得知客户端连接断开，则立刻触发onClose事件回调。 但是有些极端情况如客户端掉电、网络关闭、拔网线、路由故障等，这些极端情况客户端无法发送fin包给服务端，服务端便无法知道连接已经断开。如果客户端与服务端定时有心跳数据传输，则会比较及时的发现连接断开，触发onClose事件回调。 多端登陆 简单点说就是假如一个客服用同一个账号即登陆了电脑端又登陆了手机端，那么当电脑端再给用户回消息的时候，服务器也需要给自己的手机端推送一次消息。 架构图 附录为什么 TCP 保证不了 IM 通信的可靠传输 举个例子,当 TCP 成功将消息报文发送到服务器之后,在消息入库之前服务器挂掉了,那么这个消息也就没有被存下来,当然这一次通信就算事不可靠的了。 消息结构体 | 字段 | 说明 | 可选值 | 描述 | | — | — | — | — | | 字段 | 说明 | 可选值 | 描述 | | category | 所属分类 | | | | | | system | 系统推送的消息 | | | | customer | 客户发送的消息 | | | | manager | 客服发送的消息 | | | | heartbeat | 心跳检测（不需入库） | | | | ack | 响应消息回执（不需入库） | | | | receive | 确认收到响应回执（不需入库） | | action | 执行的动作 | | | | | | send | 正常发送 | | | | revoke | 撤回 | | | | delete | 删除 | | | | read | 已读 | | | | auth | 用户验证 | | style | 消息展示样式 | | | | | | normal | 一般的纯文本消息框 | | | | card | 卡片风格（场景：商品链接） | | | | order | 商品订单风格（场景：客户订单） | | | | assess | 客服评价的风格 | | | | toast | 灰色提示性样式（场景：客服接入时的提示） | | kind | 内容的格式 | | | | | | text | 一般的纯文本格式（包含emoji表情） | | | | picture | 图片格式（包含.jpg/.jpeg/.png/.gif等） | | | | video | 视频格式（包含.mp4/.mkv/.rmvb等） | | | | audio | 音频格式（包含.mp3/.raw等） | | | | file | 其他文件格式（包含.xml/.ppt/.docx/.dwg等） | | | | unknown | 未知的文件格式 | | id | 消息ID | -- | 每条消息都有全局唯一的ID（对应数据库的主键ID） | | task_id | 任务ID | -- | 指解决一次问题。从客户转入人工开始，会生成一个task_id，直到最后一个客服点击「结束服务」为止。在客服点击「，同一客户多次转入人工，task_id都是同一个。 | | content | 正文内容 | -- | 纯文本内容（如图片src地址、视频src地址） | | from | 主发送人 | -- | 发送方的唯一标识 | | to | 被接收人 | -- | 接收方的唯一标识 | | url | 链接 | -- | 点击消息后，跳转到目标链接 | | created_at | 发送时间 | -- | 消息的生成时间 | | is_read | 是否已读 | -- | 此消息是否已被用户看到 | | is_revoke | 是否已撤回 | -- | 此消息是否已被用户撤回 | | is_delete | 是否删除 | -- | 此消息是否已被用户删除 | | quote | 引用消息ID | -- | 引用指定的消息（场景：撤回消息时，这里应填写被撤回消息的消息ID） | | ext | 其他扩展字段 | -- | json结构化数据 |","link":"/2022/06/05/network-program/items/kefu-2.0/"},{"title":"北京","text":"文章转载于微信公众号:地理狗看世界 北京位于中国华北平原北部，被天津和河北围绕。 距今1亿多年前，在中国东部发生了一场轰轰烈烈的造山运动。 火山喷发，地壳变动，山地隆起，这就是地质史上著名的燕山运动。 太行山以西的山地抬升，以东的平原下降，奠定了今天北京的大地基础。 三面环山，向东南是开敞的平原，距离渤海150公里，也被叫作北京湾。 100米以上的山地占总面积62%，北边是燕山山脉，西边是太行山的余脉——西山。 燕山山脉和太行山山脉的接合部位叫军都山。 其中，位于门头沟区的东灵山是北京最高峰，2303米。 考古学家在北京西南的山洞里发现了生活在50万年以前的北京直立人。 之后的岁月里，早期人类一步步从山区向平原迁徙。 发源于内蒙古高原的永定河切穿西山，流经北京平原，最终注入渤海。 今天卢沟桥一带是永定河上古老的渡口。 永定河泥沙含量特别高，人称黄河他妹。 水量不稳定，河道也不稳定，1949年以前每3年决口一次，基本上北京平原就是永定河自由奔放的古河道。 自从修了官厅水库之后，永定河倒是情绪稳定了，下游也基本干了~ 因此，北京地区连个像样的大江大河都没有，自然条件非常抱歉。 自古以来没有舟楫之利，人均水资源量不足中国平均的八分之一。 冬季是寒潮通道，夏季酷热难当，房山区有过43摄氏度的高温纪录。（什么是季风气候点这里） 年降水量400-800毫米，但80%的降水都在夏天以暴雨这种激烈的方式进行。 有时候一场暴雨就能完成本年度四分之一的KPI，狗经常怀疑北京是不是被大自然拉黑了。 车马大道 在大约三四千年前，华北平原上河道稠密，沼泽遍布，只有沿着太行山东麓的一线高地成为古代先民南北往来的车马大道。 燕山和军都山通往平原有两个重要的隘口——居庸关和古北口，分别形成了居庸关大道和古北口大道。 在太行山东麓大道最北端，和居庸关大道和古北口大道交汇的枢纽，距离永定河渡口不远的地方，形成一个早期聚落。 聚落以莲花池为水源地，以附近一个小山丘命名，叫作蓟，就在今天广安门一带。 公元前11世纪，西周王朝刚刚建立，为了巩固自己的统治，把土地分给亲戚们打点。 北京地区一度被分给了两个诸侯国——蓟国和燕国。 燕国位于永定河以南，蓟国位于永定河以北。 后来，燕国灭了蓟国，疆土以北京地区为中心，包含今河北、内蒙古、山西、山东和辽宁很多地区。 蓟城成为中原农耕经济和北方游牧经济的交会之地，也是华北平原上最繁华的城市。 兵临城下 燕山山脉是华北平原北部的重要屏障，蒙古高原和东北地区少数民族南下的必经之路。 一旦喝酒撸串的汉子们翻过燕山到了北京，中原就无险可守了。 秦统一中国之后，为了防止匈奴进犯，秦始皇把燕国、赵国的防御设施根据山川地势链接起来，修建了万里长城。 今天北京地区的大部分长城都位于军都山内。 此后的北京地区成为军事重镇，每当中原王朝强大，需要开疆拓土的时候都会在这里集结兵力。 基建狂魔隋炀帝为了运送军需物资，还开凿了一条洛阳到蓟城的永济渠，开辟了从南到北的水道，成为京杭大运河的一段。 一旦中原王朝凉凉，北京就成为少数民族南下中原抢劫的军事大本营。 中国历史上，大部分在北京占山为王的政权都是少数民族政权。 安史之乱，安禄山还在北京称帝，建立大燕。 内蒙来的契丹人建立辽朝，在北京建陪都。 东北来的女真人建立金朝，也把都城从哈尔滨搬到北京，叫作金中都。 女真人打仗还行，但审美真不行，就模仿北宋开封打造了金中都，甚至把开封的漂亮石头都抢来了。 今天北海公园白塔山上的太湖石就是当时留下来的。 金朝以北京为政治中心持续了60年，在蒙古人的铁蹄下灰飞烟灭。 蒙古大军围困金中都将近一年之久，城破大屠杀了一个月，数百万人死亡，城市几乎毁灭。 C位出道 1272年，元世祖忽必烈在北京建立元大都，意思就是大汗之城。 北京第一次成为整个中国的首都，从一个地域中心成为国家中心C位出道。 虽然蒙古人的人生像兑了浓硫酸一样彪悍，但元大都的设计师刘秉忠是一个典型的汉族知识分子。 他依照中原都城传统方法设计了这座大汗之城，在城市中南部规划了一条3.75公里的中轴线。 今天北京很多城门的名称，例如安贞门、健德门都是取自于《易经》。 蒙古人把城中心的水域以各种海命名，什刹海、中南海这些名称沿用至今。 元大都的街巷被蒙古人称为胡同，这宽宽窄窄的胡同也成为几百年市民生活的印记。 元朝皇宫的中心就是今天北海公园的白塔山，皇宫附近还修建了皇家动物园和游乐场。 积水潭是京杭大运河的起点，掌握国家经济命脉的漕运总码头。 南方的粮食、木材源源不断运到大都，元大都也成为商贸繁荣的国际大都市。 蒙古人爱喝酒，积水潭一带成为食肆林立莺歌燕舞的夜总会酒吧一条街，还诞生了浪迹天涯曲曲销魂的中国元曲。 天猫商城 1368年，朱元璋赶走蒙古人，在南京称帝建立明朝的时候，为了记载平定北方的功绩，将元大都改名北平。 为了防止蒙古人南侵，就把第四个儿子朱棣派到北平做燕王，巩固北方守卫。 天天跟蒙古人打仗练出来了，朱棣手握重兵篡位。 杀人太多心里发毛，再加上北平住惯了，朱棣迁都北平，正式改名北京，意思是北方的京城。 明代北京城沿用元大都城中轴线，北端是新建的钟楼与鼓楼， 南端是永定门。 在大汗皇宫的废墟上重新修建紫禁城，就是今天的故宫。 作为泱泱天朝几千年能幸存至今的皇宫，我们中国人在宫斗剧里去过很多次了~ 出于风水的考虑，用护城河的淤泥在故宫北面堆了一个小山，命名为万岁山，就是今天的景山。 景山是北京城的几何中心，在山顶可以俯瞰北京城。 明朝是中国历史上唯一一个在北京建都的汉族政权，但北京作为一个游牧文明和农耕文明的交汇点，很早就成为民族荟萃的天猫商城。 今天北京大部分清真寺都是明代所建，北京美食中的铜锅涮肉、羊蝎子都是草原style。 前门大栅栏从明代开始成为商业中心，能在这儿开专柜的都是当时的一线潮牌。 山西人的六必居，河北人的全聚德，南京人的稻香村，安徽人的张一元，天津人的内联升，现在都是源远流长的北京老字号。 护国寺、隆福寺和白云观一带定期举行庙会。 庙会本是一个上香拜佛的宗教祭祀活动，后来人流量大了，变成商业市集，相当于古代双11。 延续至今，每年春节期间，吃喝玩乐的北京庙会都在各大公园举行。 ​ 宫阙楼台 北京西北地区的一片低洼地带，因为永定河河道迁移，形成一个湖泊群，名字就叫海淀。 风景秀丽，水波荡漾，自古村民们在这里种植水稻荷花。 当清朝皇帝成为北京新主人的时候，北京夏天的酷热搞得这些东北大叔们纷纷表示要中暑。 于是，东北大叔们对于紫禁城改动不大，心思全放在海淀修避暑的宫殿。 举全国之力修了包括圆明园、颐和园在内的三山五园，成为中国园林艺术登峰造极的巅峰。 皇帝们在这里办公，西郊离宫成为与紫禁城并重的政治中心。 为了满足清朝皇帝们追剧的需求，安徽剧组进京，在皇家扶持下发展成为京剧这种中国舞台艺术。 晚清时期内忧外患之际，清政府学习外国办新式教育。 在北京创办了中国第一个公立大学——京师大学堂，发展为今天的北京大学和北京师范大学。 但新式教育早已不能挽救垂垂老矣的帝国江山。 慈禧太后在颐和园废了维新变法，关上了帝国改弦更张的最后一道闸门。 圆明园被英法联军和八国联军两度洗劫，大清王朝最终在内忧外患中落下帷幕。 今天，这些西郊夏宫成为游客和市民游乐的公园，每一个残垣断壁，宫阙楼台都是历史的书页。 ​ 兵荒马乱 民国时期，城头频换大王旗，北平和北京改名好几回。 北京一度成为河北省的直辖市，卢沟桥事变之后还被日军侵占8年。 沦陷期间的北京，生活着几万日本侨民，有40万日本驻军。 物价飞涨、粮食危机，甚至出现几千人死亡的霍乱疫情。 1949年，北京重新成为新中国的首都。 上世纪50年代，大部分城楼和城墙以阻碍交通为由被拆除，历经7个世纪风云战火的城墙变成了今天拥堵不堪的二环路。 北京从一个千年古都变身成为共和国的工业骨干，建立了一大批像首钢、燕山石化这样的大型企业。 直到1980年，政府才痛下决心不再发展重工业，走一条服务业的新路子。 今天，以金融、旅游为主的服务业占北京经济比例达到80%左右，北京也成为中国人均GDP最高的地区。 ​ 大气包容 北京地区自古就是燕山南北多民族混居的地区，今天这座城市生活着两千万人口，其中，40% 是外来人口。 这座大气包容的城市，背负着我们这个民族的使命，承载着无数人的瑰丽梦想和无法舍弃的爱恨情仇。 但和世界上众多大城市一样，普通北京人面临的依然是无法企及的房价、拥堵的交通、和时而雾霾围城，时而风沙扑面的空气质量。 近20年来，北京都是中国生育率最低的城市，年轻人纵使才华傍身，也被五套房的房东大婶吓得不敢说话。 1000多年的兴亡沉浮，经历过夜夜笙歌的繁华，也遭遇过家国沦丧的屈辱。 故宫角楼的夕阳，簋街撸过的串儿，地铁擦身而过的人，都是我们生活的余热。 希望我们能一同翻越逆境，就像度过每一次人生低谷，等待北京的依旧是人来人往朝气蓬勃~","link":"/2022/05/02/geography/cities/beijing/"},{"title":"地理之家乡","text":"城市北京上海","link":"/2022/05/02/geography/home/"},{"title":"Study-With-Work(给团队的一封信)","text":"曹乐是典型学霸，清华本硕，多年互联网大厂研发经验，所以“资深”。我刚到新部门的时候，约各位合作部门的Leader请教，也算帮我做新岗位入职的“平稳降落”。印象最深的，就是作为技术Leader的曹乐，一点都不像技术——他和我谈对业务的理解，各个维度的见解与想法，让人印象深刻。然后，他很热情的帮我安排了他团队几个同学的1-1，帮助我了解了更多从技术视角对业务与技术团队协同、共创的思考。后来，开始深入合作，发现合作的技术同学，不仅仅技术上追求精进，而且是真正的也能够跳出来去看业务全局。能跳出来，能跳进去。 这封信，是曹乐写给团队的。如何成为技术大牛（来自另一学霸同事的评论，感谢）：寻找范式、刻意练习、及时反馈；垂直打透、横向迁移、深度复盘；聪明人要下笨功夫。 Enjoy~ 很多同学都有关于工程师该如何成长的问题，大家普遍对如何成长为牛人，如何获得晋升，如何在繁忙的工作中持续学习充满了困惑，这其实是每一位同学成长过程中必经之路。最近几次1-1也和同学聊过这方面的问题。在这里也想跟大家分享一下我的一些心得。 同学们普遍对成长充满了焦虑感。工作太忙没时间学习，需求太多太琐碎感觉自己没什么进步，做技术是不是做到35岁以后就没人要了，等等，都是对成长焦虑的体现。在这里我想说的是，这种焦虑是正常的，所有的渴望，在内心的投射其实都是焦虑。任何一个渴望成长的人，不管处于什么阶段，一线工程师，架构师，还是总监，副总裁，其实内心中都是充满了焦虑的，无一例外。对于这种焦虑，我们所要做的是接纳，而不需要过度担忧。这种焦虑并不是说，想明白如何成长了就会没有了，到了某个阶段就会没有了的。成长的脚步和期待一刻不止，内心的焦虑也一刻不会停歇。正是这种焦虑感，驱使你写代码追查问题到星夜，驱使你牺牲休息娱乐的时间和一本本厚厚枯燥的书作伴，驱使你不断努力向前，不舍昼夜。相反的，如果内心中没有这种焦虑，反而是值得担忧的。这可能说明已经习惯呆在自己的舒适区了。在现在这样一个高速发展的社会，以及我们这样一个高速发展和变化的行业，失去对成长的渴望和焦虑反而是一个非常危险的信号。 所谓的程序员35岁危机，其实背后的根本原因是，有太多太多人在工作几年以后，就觉得自己什么都会了，之后的十几年工作只不过是头2-3年的简单重复而已。在我们这样一个行业里，在招聘的时候，如果摆在管理面前的两个人，一个是初出茅庐或刚工作2-3年，充满了对成长的渴望；另一个工作十多年了但水平和工作2-3年的人差不多，只是更熟练一些，不过在舒适区已经躺了十年了。如果负责招聘的是你，你会做出什么样的选择？ 而另一方面，其实是高端人才在行业内的极度极度稀缺。大家可以想一想，我们部门上一次招聘到D10及以上的同学是什么时候？从业务平台部2016年中成立到现在，一个都没有过。D9同学也是凤毛麟角，一年能招到1-2个就足够可以偷着乐了。面试碰到牛人的时候，就如同相亲碰到女神一样激动。这其实在行业内是非常普遍的现象，真正的大牛太稀缺了。在这样一个行业里，如果一个人能够持续成长，能力和工作年限成正比的持续提升，这样的人，任何时候在行业里都是被疯抢，怎么可能会遇到任何年龄的危机呢？ 每一个业务平台技术部的同学，都应该立志成为这样的大牛，持续学习和成长。 如何学习，其实是有方法论的，那就是刻意练习。所谓的10000小时成为大牛的理论是片面的，如果只是简单重复10000小时，是不可能成为大牛的。刻意练习包含了三个步骤。第一，找到你要学习的这个领域体系的范式（pattern）；第二，针对每个范式刻意的反复学习和练习；第三，及时反馈。 大家在过往的工作和学习生活中，或多或少都在实践着刻意练习。拿面临高考的中学生举例子，好的学生通常是把一门功课拆成了很多知识点（寻找pattern），然后针对知识点以及他们的排列组合，有针对性的反复做各种难度的题（刻意练习），每次做完题都对一下答案看看正确与否，如果错了就思考，记录，复盘（持续及时反馈）。这样的学习方法就是事半功倍的。而事倍功半的学习方法，就是不分青红皂白拿起一本习题或卷子就拼命做，我上学的时候身边不少同学非常勤奋但成绩并不好，多半都是这个原因。再举一个我最近在学打羽毛球的例子，正确的学习方法是把打羽毛球拆解成步法和手上动作，小碎步，米字步，正反手挑球，放网，正手和头顶高远球吊球杀球等（寻找pattern），然后针对每一个动作反复练习（刻意练习），然后请教练或者录下来看视频纠正自己的动作（及时反馈）；而错误的学习方法是，上来就盲目找人打比赛，以赛代练，这样的进步是很慢的，而且错误的动作形成习惯以后未来反而很难纠正。 当学习方法不正确的时候，刻苦的学习常常只是看起来很勤奋，并没有应有的效果。当接触一个陌生领域的时候，错误的学习方法是不带目的性，上来就找一堆相关的大部头开始啃。而正确的学习方法应该是快速梳理该领域的知识点，形成框架体系（寻找pattern），这里有些小窍门可以快速构建起一个领域的知识点体系，例如看一些该领域的综述性或开创性的文章（看论文，别瞎看网上的文章），或者找本该领域综述性的教科书看它的目录（注意，好的教科书的目录往往就是这个领域的知识框架，内容倒不一定非要看下去）。然后，针对每个知识点，找书里的相关章节，该领域相关paper里的相关section深入学习，建立起自己对这个知识点的理解（刻意练习）。最后，再把知识点和现实工作中的情况（自己工作，或其他公司相关的工作）进行对照（及时反馈），从而建立对一个知识点的深度理解，最后融会贯通建立对一个领域的理解。这样说可能有点抽象，拿我当年学习分布式存储的过程为例子，先结合自己的工作内容梳理出需要深入了解的知识点（例如，元信息组织，Meta Server设计和HA，副本组织和管理，Recovery，Rebalance，单机存储引擎，数据/元信息流，纠删码，一致性，多租户，存储介质，网络环境和IDC等等），同时看很多综述性的材料，梳理分布式存储的知识点（有网上各种整理的比较好的文章，也有从各种系统实现的paper里抽出），不断迭代构建分布式存储领域的知识点（寻找pattern，这是最难的一个过程）；然后针对每一个知识点，找相关材料进行深度学习，例如，对于分布式一致性，需要阅读CAP理论，Paxos的论文，Raft的论文等等以及周边的很多材料（刻意练习）；然后找各种系统实现的论文或文章，比如GFS，Dynamo，Aurora，OceanBase，Ceph，Spanner等等，看看和对比它们在一致性上是如何考虑和取舍的，当然，最重要的是结合自己工作中的反复实践和所学知识点进行比对（及时反馈）。这三个阶段并不是割裂的，而是周而复始的，经常会在刻意练习和及时反馈的学习过程中，发现自己遗漏的知识点，或者发现自己梳理的两个知识点其实是重合的。通过这种交叉比对，以及在实践中不断检验的方式建立的知识点是非常可落地的，而不会看了几篇论文以后就人云亦云。拿分布式存储的一致性举例子，如果不是反复对比、思考和反复实践，你不会发现GFS论文里最难的一段，多个Writer对一个文件进行append的逻辑，在实践中根本没用；你也不会发现看起来优雅而学术的CAP三选二的理论，实践中压根不是这么完美，很多时候只能三选一；你也不会发现Dynamo论文里的Vector Clock，网上有无数文章摇头晃脑的解读，但在Amazon的应用场景里是个典型的over design，Cassandra在这点就务实很多。 这时候大家可能会有个疑问，工作本身就如此繁忙了，哪里能抽出足够多的时间去学习？ 其实工作和学习本身，是不应该被割裂的。工作本来就应该是学习的一部分，是学习中的实践和及时反馈的部分。学习如果脱离工作的实践，其实是非常低效的。因此每个同学应该对自己工作所在的这个技术和业务领域进行系统性的学习，并在工作中反复实践和验证。不同的领域之间其实是融汇贯通的，当你对一个领域精通并总结出方法论以后，很容易就能上手别的领域。因此花几年实践彻底研究透一个领域，对于刚工作几年的同学来说，是非常重要，甚至是必须的，也只有在一个领域打透之后才谈得上跨领域迁移，去拓展自己的知识面。更直接的说，对于一个领域还未完全掌握的同学，深度是最重要的，不用想广度的事情，等掌握了一个领域之后，再去拓展广度就变得很容易了。这里一个常见的误区是，学习的内容和工作的领域没有太多直接的关系。例如，我以前曾经花了非常大的功夫去读Linux内核的源代码以及很多相关的大部头，几乎花掉了我将近两年的所有空闲时间，然而在我这些年的工作里，几乎是没有用处的，最多就是有一些“启发”，ROI实在是太低了，现在也忘得差不多了。更重要的，软件工程是一门实践科学，从书本上得到的知识如果没有在实践中应用和检验，基本上是没有用处的。举一个例子，很多优秀的架构师，尽管日常工作中可能反复在用，但未必说得出开闭原则，里氏替换原则，迪米特法则等等，反过来，对面向对象设计这7大原则出口成章的人，很多其实离真正的架构师还远得很，有些甚至只是博客架构师而已。实践远远比看书，看文章重要得多，上文所述的我构建自己分布式存储知识体系的过程，看起来好像都是看材料，看论文，而实际上80%的收获都来源于带着理论的实践，和从实践中总结沉淀的理论。因此，彻底搞明白自己工作所在的技术和业务领域，是最务实高效的做法，工作和学习割裂，会导致工作和学习都没做好。 这时候大家可能会有另一个疑问，感觉日常工作非常琐碎，学不到什么东西，怎么办？ 如果把学习分成从书本中学，和从工作中学这两种的话，那毫无疑问，工作中的“知识密度”，比起书本的“知识密度”，肯定是要低很多的，因为书本里的知识，那都是人家从他们的工作中抽象总结出来的。这也是为什么大家普遍觉得日常工作“琐碎”。然而工作中每个点滴的琐事与平凡，都是可以抽象总结成为方法论的，更别说工作所在的领域自身的博大精深了。从日常工作中学习的秘诀，就是“行动中思考”。 对于每一个软件工程师，最重要的两个能力，是写代码的能力和trouble shooting的能力。并且，要成为优秀的架构师，出色的开发能力和追查问题的能力是一切的基础。提高写代码的能力的核心，首先在于坚持不断的写，但更重要的，在于每天，每周，持续不断的review自己之前的代码；同时，多review牛人写的代码，比如是团队里你觉得代码写的比你好的同事，比如社区里以代码漂亮著称的开源代码（作为一个C++程序员，当年我的榜样之一是boost库）。一旦觉得自己之前的代码不够好，就立刻复盘，立刻重构。更重要的是，多思考自己代码和好的代码之间不同之处背后的为什么，通常这就是为什么这些代码更好的背后的秘密。特别要说明的是，代码规范除了知道是什么外，要格外重视思考每一个代码规范背后的为什么。代码规范的每一句话，背后无一例外都是一片江湖上的血泪史。要提高trouble shooting的能力，关键在于要深度复盘自己遇到的每一个问题，包括线上的，包括测试发现的，寻找每一个问题，每一次事故背后的root cause，并且思考后续如何避免同类问题，如何更快的发现同类问题。要对团队内外遇到的所有问题都要保持好奇心，关注一下周边的事故、问题背后的root cause。Trouble shooting能力的提高是几乎无法从书本上得到的，完全来源于对每一个问题的深度思考，以及广泛积累每一个问题。对于架构师而言，可能未必在一线写代码了，但看团队中一个架构师是否真正牛逼的一个很重要标准，就是看他是否能够追查出团队其他同学查不出来的问题。我见过的一个真正牛逼的架构师，对于系统中疑难杂症，通常问几个问题，就能大致猜出是哪里出的问题，以及可能的原因是什么，准确程度如同算命，屡试不爽，令人叹为观止。 对于一个架构师，除了更加优秀的代码能力和trouble shooting能力外，需要构建相对完整的当前技术领域的知识体系，需要有体系化的思维能力，需要对技术所服务的业务要有非常深入的了解。体系化的思维能力，来源于两个方面。一方面是在日常工作中，对每一个接口设计，每一个逻辑，每一个模块，子系统的拆分和组织方式，每一个需求的技术方案，每一个系统的顶层设计，都要反复思考和推敲，不断的复盘。另一方面，需要大量广泛的学习行业内相似系统的架构设计，这其实就是开天眼，只是技术相对来说，行业内的交流更加频繁，淘宝、美团、百度、Google、Facebook、Amazon等各个公司介绍系统架构的论文和PPT铺天盖地，需要带着问题持续学习。除了技术领域本身外，架构师需要非常了解业务上是如何使用我们的系统的，否则非常容易over design，陷入技术的自嗨中，这也是为什么我说Amazon Dynamo论文里讲的Vector Clock是个over design的原因。另一方面，很多时候技术上绕不过去的坎，可能非常复杂的实现，往往只需要上层业务稍微变通一下，就完全可以绕过去，这也是为什么我说GFS论文里，多个Writer同时Append同一个文件是个根本没用的设计（实际上Google内部也把这个功能去掉了）。这也是为什么我在咱们部门内反复强调大家需要深入了解业务，因为达到同样的业务目标，可能稍微改一下产品方案就可以让需求的技术实现变得无比简单。只有真正知道上层业务是如何使用系统的，才可能真正做好架构。 深入了解业务并不难，对于每个同学，只要对于每一个接到的需求，对于每一个需求评审中的需求，对于周边同学或团队要做的需求，都深入思考为什么业务要提出这个需求，这个需求解决了业务的什么问题，有没有更好的方案。遇到不明白的多和周边同学、产品、运营同学请教。最怕的是自己把自己限定为纯粹的研发，接到需求就无脑做，这等于放弃了主动思考。衡量一个人是不是好的架构师，也有一个方法。对于一个需求，如果他给出了好几个可行的方案，说这些方案也可以，那些方案也可以，往往说明他在架构师的路上还没有完全入门。架构师的难点不在于给出方案，而在于找到唯一的那一个最简单优雅的方案。 总结起来看，行动中思考，就是始终保持好奇，不断从工作中发现问题，不断带着问题回到工作中去；不断思考，不断在工作中验证思考；不断从工作中总结抽象，不断对工作进行复盘，持续不断把工作内容和全领域的知识交叉验证，反复实践的过程。 在工作所在的技术和业务领域中刻意练习，加上行动中思考，就是成为技术大牛的秘诀。 看起来方法也不复杂，为什么大牛还是非常稀少？ 尽管我们通篇都在讲方法，但其实在成为技术大牛的路上，方法反而是没那么重要的。真正困难的，在于数年，数十年如一日的坚持。太多人遇到挫折，遇到瓶颈，就觉得手头的事情太乏味枯燥，就想要换一个方向，换一个领域，去学新的技术，新的东西。而真正能够成为大牛的，必须是能够青灯古佛，熬得住突破瓶颈前长时间的寂寞的，必须是肯下笨功夫的聪明人。因此，和坚持相比，方法其实并没有那么重要。 和大家共勉。 （完）","link":"/2022/02/06/study-with-work/"},{"title":"团队 MySQL 开发规范","text":"一、规范背景及说明系统趋于稳定，着手开发新零售系统，为了避免系统“野蛮生长“，开发和维护都需要一套更好的 SQL 规范进行数据的管理。该规范旨在达到以下目标(即亟待解决的问题)： 字段风格统一,避免开发不一致性 选用合理的字段类型,节省服务器成本 优化字段类型和索引,提高读写效率 对 SQL 变更进行版本管理,降低运维风险 二、SQL 时间成本 先搞清楚问题，然后有的放矢 I/O成本 我们的表经常使用的MyISAM、InnoDB存储引擎都是将数据和索引都存储到磁盘上的，当我们想查询表中的记录时，需要先把数据或者索引加载到内存中然后再操作。这个从磁盘到内存这个加载的过程损耗的时间称之为I/O成本。 CPU成本 读取以及检测记录是否满足对应的搜索条件、对结果集进行排序、分组等这些操作损耗的时间称之为CPU成本。 对于InnoDB存储引擎来说，页是磁盘和内存之间交互的基本单位(每页默认16KB)，InnoDB规定读取一个页面花费的成本常数默认是1.0，读取以及检测一条记录是否符合搜索条件的成本常数默认是0.2 三、规范流程及优化思路 四、规范内容1.表与字段1.1 命名1.1.1 结合业务1.1.2 避免使用保留关键字1.1.3 表和字段名只能使用字母、数字和下划线组成，一律小写 1.2 注释1.2.1 表名和字段都需要注释 1.3 编码1.3.1 规定使用 utf8mb4 字符集和 utf8mb4 比较规则1.3.2 命令：SET NAMES 字符集名 可以统一以下系统变量,保证不乱码character_set_client、character_set_connection、character_set_results 1.4 数据类型1.4.1 整型| 数据类型 | 占用字节 | 有符号最小值 | 有符号最大值 |无符号最小值|有符号最大值|| — | — | — | — |—|—|| TINYINT | 1 | -127 | 128 | 0 | 255| SMALLINT | 2 | -32768 | 32767 | 0 | 65535| INT | 4 | -2147483648 | 2147483647 | 0 | 4294967295 1.4.2 时间类型| 数据类型 | 占用字节 | 格式 | 说明| — | — | — | — |—|—|| date | 3 | yyyy-MM-dd | 只存年月日（用户浏览历史） || time | 3 | HH:mm:ss | 只存时分秒(线下店铺) || datetime | 8 | yyyy-MM-dd HH:mm:ss | || timestamp | 4 | yyyy-MM-dd HH:mm:ss | | datetime 与 timestamp 的区别1.日期范围不同2.时区敏感3.占用字节不同4.查询效率不同 1.4.3 定点型 DECIMAL涉及金钱的字段一律使用 DECIMAL 数据类型，规定设置为 DECIMAL(20, 4) 1.4.4 字符类型varchar(M):变长字段；适用于不确定长度的字符；存储引擎有额外维护,查询效率不如 charchar(M):定长字段；适用于手机号、状态值； Mysql Server 规定一行所有文本最多存 65535 字节,在不同字符集下 M 都有最大值，超多最大值 varchar 会自动转换为 Text 1.4.5 JSON 类型 JSON 数据类型最大存储量受系统变量 max_allowed_packet 限制JSON 数据类型不能有非 NULL 的默认值 JSON 对象查询： 123456789101112131415161718192021假设列 category_front = { &quot;space&quot;: [ { &quot;first&quot;: 124, &quot;second&quot;: 127 } ], &quot;category&quot;: [ { &quot;first&quot;: 28, &quot;second&quot;: 77 } { &quot;first&quot;: 26, &quot;second&quot;: 74 } ]}可使用 $query-&gt;whereJsonContains('category_front-&gt;category', ['first' =&gt; 26]) JSON 数组查询： 12假设列 category_front = [1,2,3]可使用 $query-&gt;whereJsonContains('category_front, 2) JSON 对象模糊查询 1$query-&gt;whereRaw('json_extract(parameters, ' . &quot;'$.name'&quot; . ') like &quot;%{$conditions[&quot;name&quot;]}%&quot;') JSON 对象 key exist 查询 1$query-&gt;whereRaw(&quot;json_extract(parameters, 'one', '$.name')&quot;) 1.5 默认值不建议字段设置允许为 NULL1.5.1 参考：字段为NULL会导致的问题1.5.2 存储引擎额外维护成本,如图： 1.6 常用字段约定1.6.1 对于是否为 xx 的字段 1 默认都表示是，0 默认表示为否| 参考字段 | 参考含义 | 说明 || — | — | — | — |—|| is_enable | 在职｜离职 | 用于人员在职状态 || is_ open | 开启｜关闭 | 用于后台配置按钮 || is_ show| 展示｜隐藏 | 用户小程序开关控制 || is_ [状态]| | |1.6.2 常用字段建议人物信息| 参考字段 | 参考含义 | 说明 || — | — | — | — |—|| nickname | 用户昵称 | || username | 用户真实姓名 | || avatar | 头像 | 头像避免使用 image 字段 || phone | 手机号 | || wechat | 微信号 | || gender | 用户性别 | || userid | 用户 ID | 外键关联 || openid | 微信应用下用户 ID | || unionid | 微信开放平台下用户 ID | || external_userid| 企微应用下外部联系人 ID | | 时间信息 | 参考字段 | 参考含义 | 说明 || — | — | — | — |—|| created_at | 创建时间 | || updated_at | 更新时间 | || begined_at | 开始时间 | || expired_at | 过期时间 | || deleted_at | 删除时间 | || rejected_at | 驳回时间 | || finished_at | 完成时间 | | 状态类型信息 表示状态(除去是否状态)和类型的字段还是建议用汉字其次用英文单词最次用数字。三者查询效率从高到低依次为：数字&gt;英文&gt;汉字三者理解效率从高到低依次为：汉字&gt;英文&gt;数字 | 参考字段 | 参考含义 | 说明 || — | — | — | — |—|| wait | 等待/未开始 | || ongoing | 进行中/正在处理 | || finished | 已完成 | || rejected | 已驳回 | || deleted | 已删除 | | 2.索引2.1 B+ 树索引结构索引为什么快？如何利用索引结构的特性 2.2 创建与使用索引约定2.2.1 索引命名建议以 uq_ 或 idx_ + 字段名称组成2.2.2 只为用于搜索、排序或分组的列创建索引，参考 Order By 的执行原理 2.2.3 索引列的散列程度尽量高2.2.4 索引列的类型尽量小2.2.5 避免创建冗余索引2.2.6 避免索引失效 参考 哪些情况会导致索引失效 3.分析 SQL 语句3.1 explain 通常优化至少到 range 级别，最好能优化到 ref const 通过主键列来定位一条记录ref 通过普通的二级索引列来定位一条记录range 通过范围匹配来定位一条记录 3.2 profiling 4.运维将每次 SQL 变动纳入版本管理，记录变更的 SQL 语句，参考如下：4.1 创建 1234567891011121314151617181920CREATE TABLE user ( `id` bigint(11) NOT NULL AUTO_INCREMENT, `user_id` bigint(11) NOT NULL COMMENT ‘用户id’ `username` varchar(45) NOT NULL COMMENT '真实姓名', `email` varchar(30) NOT NULL COMMENT ‘用户邮箱’, `nickname` varchar(45) NOT NULL COMMENT '昵称', `avatar` int(11) NOT NULL COMMENT '头像', `birthday` date NOT NULL COMMENT '生日', `sex` tinyint(4) DEFAULT '0' COMMENT '性别', `short_introduce` varchar(150) DEFAULT NULL COMMENT '一句话介绍自己，最多50个汉字', `user_resume` varchar(300) NOT NULL COMMENT '用户提交的简历存放地址', `user_register_ip` int NOT NULL COMMENT ‘用户注册时的源ip’, `create_time` timestamp NOT NULL COMMENT ‘用户记录创建的时间’, `update_time` timestamp NOT NULL COMMENT ‘用户资料修改的时间’, `user_review_status` tinyint NOT NULL COMMENT ‘用户资料审核状态，1为通过，2为审核中，3为未通过，4为还未提交审核’, PRIMARY KEY (`id`), UNIQUE KEY `idx_user_id` (`user_id`), KEY `idx_username`(`username`), KEY `idx_create_time`(`create_time`,`user_review_status`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='网站用户基本信息'; 在某列前新增字段，如在email之前新增 phone 字段 1ALTER TABLE `user` ADD COLUMN `phone` CHAR(11) NOT NULL DEFAULT '' COMMENT '手机号' BEFORE `email` 在某列前新增字段，如在email之前新增 phone 字段 1ALTER TABLE `user` ADD COLUMN `phone` CHAR(11) NOT NULL DEFAULT '' COMMENT '手机号' BEFORE `email` 在某列前新增字段，如在email之前新增 phone 字段 1ALTER TABLE `user` ADD COLUMN `phone` CHAR(11) NOT NULL DEFAULT '' COMMENT '手机号' BEFORE `email` 修改一个字段的类型 1alter table user MODIFY new1 VARCHAR(10); 修改一个字段的名称，此时一定要重新指定该字段的类型 1alter table user CHANGE new1 new4 int;","link":"/2022/02/06/mysql-contract/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/02/06/hello-world/"}],"tags":[{"name":"地理","slug":"地理","link":"/tags/%E5%9C%B0%E7%90%86/"},{"name":"职业成长","slug":"职业成长","link":"/tags/%E8%81%8C%E4%B8%9A%E6%88%90%E9%95%BF/"},{"name":"城市","slug":"城市","link":"/tags/%E5%9F%8E%E5%B8%82/"},{"name":"网络编程","slug":"网络编程","link":"/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"}],"categories":[{"name":"MySQL CookBook","slug":"MySQL-CookBook","link":"/categories/MySQL-CookBook/"},{"name":"地理","slug":"地理","link":"/categories/%E5%9C%B0%E7%90%86/"},{"name":"职业成长","slug":"职业成长","link":"/categories/%E8%81%8C%E4%B8%9A%E6%88%90%E9%95%BF/"},{"name":"城市","slug":"地理/城市","link":"/categories/%E5%9C%B0%E7%90%86/%E5%9F%8E%E5%B8%82/"},{"name":"网络编程","slug":"网络编程","link":"/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"项目实践","slug":"网络编程/项目实践","link":"/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"},{"name":"客服系统 2.0","slug":"网络编程/项目实践/客服系统-2-0","link":"/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/%E5%AE%A2%E6%9C%8D%E7%B3%BB%E7%BB%9F-2-0/"},{"name":"北京","slug":"地理/城市/北京","link":"/categories/%E5%9C%B0%E7%90%86/%E5%9F%8E%E5%B8%82/%E5%8C%97%E4%BA%AC/"}]}